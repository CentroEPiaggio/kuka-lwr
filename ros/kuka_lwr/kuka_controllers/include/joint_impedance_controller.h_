







#ifndef KUKA_CONTROLLERS__JOINT_IMPEDANCE_CONTROLLER_H
#define KUKA_CONTROLLERS__JOINT_IMPEDANCE_CONTROLLER_H

#include <ros/node_handle.h>
#include <hardware_interface/joint_command_interface.h>
#include <controller_interface/controller.h>
#include <std_msgs/Float64.h>
#include <Eigen/Core>
#include <Eigen/Geometry>
#include <ros/ros.h>
#include <eigen_conversions/eigen_kdl.h>
#include <eigen_conversions/eigen_msg.h>
#include <kdl/chainfksolver.hpp>
#include <kdl/chainfksolverpos_recursive.hpp>
#include <kdl/chain.hpp>
#include <kdl/chainjnttojacsolver.hpp>
#include <kdl/frames.hpp>

/* Control mode 30 in kuka robot

 tau_cmd = K*(q_des - q_msr) + D*dotq_msr + tau_des + f(q,dotq,ddotd)

*/

namespace kuka_controllers
{

	class JointImpedanceController: public controller_interface::Controller<hardware_interface::EffortJointInterface>
	{
	public:
		EIGEN_MAKE_ALIGNED_OPERATOR_NEW;
		JointImpedanceController() {}
		~JointImpedanceController() {}

		bool init(T* hw, ros::NodeHandle &n)
		{
			node_ = n;
			std::string tip_name;
			if (!node_.getParam("initial_joint", initial_joint_)){
			ROS_ERROR("JointImpedanceController: No root name found on parameter server (namespace: %s)",
			  node_.getNamespace().c_str());
			return false;
			}
			if (!node_.getParam("final_joint", final_joint_)){
			ROS_ERROR("JointImpedanceController: No tip name found on parameter server (namespace: %s)",
			  node_.getNamespace().c_str());
			return false;
			}

			assert(robot_state);
			robot_state_ = robot_state;
			if (!chain_.init(robot_state_, root_name_, tip_name))
				return false;
			if (!chain_.allCalibrated())
			{
				ROS_ERROR("Not all joints in the chain are calibrated (namespace: %s)", node_.getNamespace().c_str());
				return false;
			}
			if (chain_.size() != Joints)
			{
				ROS_ERROR("The JointImpedanceController works with %d joints, but the chain from %s to %s has %d joints.",
			          Joints, root_name_.c_str(), tip_name.c_str(), chain_.size());
				return false;
			}

			KDL::Chain kdl_chain;

			sub_gains_ = node_.subscribe("gains", 2*Joints, &JointImpedanceController::setGains, this);
  			sub_posture_ = node_.subscribe("command_configuratio", Joints, &JointImpedanceController::commandConfiguration, this);
			std::vector< std::string > joint_names;

			return true;
		}

		void starting(const ros::Time& time) {
			tau_cmd_.zeros();
			tau_des.zeros();
			K_ = 300*Eigen::Identity();
			D_ = 0.7*Eigen::Identity();

			q_des_ = JointVec_msr_;
			dq_msr_.zeros();
		}

		void update(const ros::Time& time, const ros::Duration& period){

			chain.getVelocities(JointVelVec_msr_);
			command_ = K_*(JointVec_ - JointVec_msr_) + D_*JointVelVec_msr_ + tau_;

		}
		
		void setGains(const std_msgs::Float64MultiArray::ConstPtr &msg)
		{
			if (msg->data.size() == 2*Joints){
				for (size_t i = 0; i < Joints; ++i)
					K_[i] = msg->data[i];
				for (size_t i = Joints; i < 2*Joints; ++i)
					D_[i] = msg->data[i];
			}
			ROS_INFO("New gains K: %.1lf, %.1lf, %.1lf %.1lf, %.1lf, %.1lf, %.1lf",
			     K_[0], K_[1], K_[2], K_[3], K_[4], K_[5], K_[6]);
			ROS_INFO("New gains D: %.1lf, %.1lf, %.1lf %.1lf, %.1lf, %.1lf, %.1lf",
			     D_[0], D_[1], D_[2], D_[3], D_[4], D_[5], D_[6]);
		}

		void commandConfiguration(const std_msgs::Float64MultiArray::ConstPtr &msg)
		{
			if (msg->data.size() == 0) {
			  use_posture_ = false;
			  ROS_INFO("Posture turned off");
			}
			else if ((int)msg->data.size() != Joints) {
			  ROS_ERROR("Posture message had the wrong size: %d", (int)msg->data.size());
			  return;
			}
			else
			{
			  for (int j = 0; j < Joints; ++j)
			    JointVec_[j] = msg->data[j];
			}
		}

		
		Eigen::Matrix<double, Joints, 1> tau_cmd;
		Eigen::Matrix<double, Joints, 1> tau_msr;
		Eigen::Matrix<double, Joints, 1> q_des;
		Eigen::Matrix<double, Joints, 1> q_msr_;
		Eigen::Matrix<double, Joints, 1> dq_msr;
		Eigen::Matrix<double, Joints, Joints> K_;
		Eigen::Matrix<double, Joints, Joints> D_;
		std::vector<hardware_interface::JointHandle> joint_handles_;
		std::string base_joint_, tip_joint_;

	private:
		enum { Joints = 7 };
		ros::NodeHandle node_;
  		ros::Subscriber sub_gains_;
  		ros::Subscriber sub_configuration_;
	};

};

#endif

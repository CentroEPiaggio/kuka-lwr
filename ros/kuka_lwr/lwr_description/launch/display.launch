<launch>
	<!-- LAUNCH INTERFACE -->
	<arg name="gui" default="false" />
	<arg name="robot_name" default="lwr_on_box"/>
	<arg name="use_rviz" default="true"/>
	<arg name="use_joint_state_publisher" default="true"/>
	<arg name="use_lwr_sim" default="true"/>
	<arg name="load_moveit" default="true"/>

	<!-- LAUNCH IMPLEMENTATION -->

	<!-- the urdf parameter -->
	<param name="robot_description" command="$(find xacro)/xacro.py $(find lwr_description)/robot/$(arg robot_name).urdf.xacro" />
	<param name="use_gui" value="$(arg gui)"/>

	<group if="$(arg use_joint_state_publisher)">
		<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
			<rosparam param="source_list">[/lwr/joint_states]</rosparam>
		</node>
	</group>

	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"  />

	<group if="$(arg use_rviz)">
		<node name="my_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find lwr_description)/launch/rviz_config.rviz" output="screen"/>
	</group>

	<!-- load controllers -->
	<include file="$(find lwr_controllers)/launch/load_controllers.launch"/>

	<group if="$(arg load_moveit)">
		<!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
		<include file="$(find lwr_moveit)/launch/move_group.launch">
			<arg name="allow_trajectory_execution" value="true"/>  
			<arg name="fake_execution" value="false"/>
			<arg name="info" value="true"/>
			<arg name="debug" value="false"/>
		</include>

		<!-- Launch the c++ interface for the planner -->
		<!-- adjust the planner parameters -->
		<param name="max_points_in_trajectory" value="50" />
		<param name="max_planning_attempts" value="2" />
		<param name="max_planning_time" value="2" />
		<param name="tolerance_in_position" value="0.1" />
		<param name="tolerance_in_orientation" value="0.1" />
		<!-- choose the group you want to plan for -->
		<param name="group_name" value="lwr" />
		<!-- load the node that implements the /trajectory_planning_srv -->
		<node name="lwr_path_planner" pkg="lwr_moveit" type="lwr_path_planner" respawn="true" output="screen"/>
	</group>

	<group if="$(arg use_lwr_sim)">
		<!-- spawn the robot in gazebo -->
		<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name)"  respawn="false" output="screen" />

		<!-- enable/disable gui at will, the rviz listens to the simulation -->
		<include file="$(find gazebo_ros)/launch/empty_world.launch">
			<arg name="world_name" value="$(find lwr_description)/worlds/simple_environment.world"/>
			<arg name="paused" value="false"/>
			<arg name="use_sim_time" value="true"/>
			<arg name="gui" value="true"/>
			<arg name="headless" value="false"/>
			<arg name="debug" value="false"/>
		</include>

	</group>
	<group unless="$(arg use_lwr_sim)">
		<include file="$(find lwr_hw)/launch/lwr_hw.launch">
			<arg name="port" default="49948"/>
			<arg name="ip" default="192.168.0.20"/>
		</include>
	</group>
</launch>

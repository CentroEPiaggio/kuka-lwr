<launch>
    <!-- The planning and execution components of MoveIt! configured to run -->
    <!-- using the ROS-Industrial interface. -->
    
    <!-- Non-standard joint names:
    - Create a file [robot_moveit_config]/config/joint_names.yaml
    controller_joint_names: [joint_1, joint_2, ... joint_N] 
    - Update with joint names for your robot (in order expected by rbt controller)
    - and uncomment the following line: -->
    <!-- <rosparam command="load" file="$(find [robot_moveit_config])/config/joint_names.yaml"/> -->
    
    <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
    <!--  - if sim=false, a robot_ip argument is required -->
    <arg name="sim" default="true" doc="If true, the robot will be simulated in Gazebo" />
    <arg name="ip" default="192.168.0.20" unless="$(arg sim)" doc="The IP address of the robot" />
    <arg name="port" default="49939" unless="$(arg sim)" doc="The listening port of the FRI interface" />
    <arg name="t1_limits" default="false"/>
    <arg name="fril_init_file" default="$(find single_lwr_robot)/config/980241-FRI-Driver.init"/>
    <arg name="controllers" default="joint_trajectory_controller"/>
    <arg name="stopped_controllers" default="gravity_compensation_controller one_task_inverse_kinematics"/>
    
    <!-- in case you have different robot configurations -->
    <arg name="robot_name" default="single_lwr_robot"/>
    
    <!-- load the robot_description parameter before launching ROS-I nodes -->
    <include file="$(find single_lwr_moveit)/launch/planning_context.launch" >
        <arg name="load_robot_description" value="true" />
    </include>
    
    <!-- load robotHW configurations to rosparam server -->
    <rosparam command="load" file="$(find single_lwr_robot)/config/hw_interface.yaml"/>

    <!-- load all controller configurations to rosparam server -->
    <rosparam file="$(find single_lwr_robot)/config/controllers.yaml" command="load"/>
    
    <remap from="/lwr/joint_states" to="/joint_states"/>  <!--TODO: why is this needed??-->
    
    <!-- run the robot simulator and action interface nodes -->
    <group if="$(arg sim)">
        <!-- spawn the robot in gazebo -->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model lwr_on_a_box"  respawn="false" output="screen" />
        
        <!-- enable/disable gui at will, the rviz listens to the simulation -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find single_lwr_robot)/worlds/simple_environment.world"/>
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="true"/>
            <arg name="headless" value="false"/>
            <arg name="debug" value="false"/>
        </include>
        
    </group>
    
    <!-- publish the robot state (tf transforms) -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    
    <include file="$(find single_lwr_moveit)/launch/move_group.launch">
        <arg name="publish_monitored_planning_scene" value="true" />
    </include>
    
    <!-- Load updated joint limits (override information from single_lwr_moveit) to respect T1 mode limits -->
    <group if="$(arg t1_limits)" ns="robot_description_planning">
        <rosparam command="load" file="$(find single_lwr_robot)/config/t1_joint_limits.yaml"/>
    </group>
    
    <include file="$(find single_lwr_moveit)/launch/moveit_rviz.launch">
        <arg name="config" value="true"/>
    </include>
    
    <include file="$(find single_lwr_moveit)/launch/default_warehouse_db.launch" />
    
    <!-- run the "real robot" interface nodes -->
    <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
    <!--   - replace these calls with appropriate robot-specific calls or launch files -->
    <group ns="lwr" unless="$(arg sim)">
        <!--add a copy of the robot description within the name space -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find single_lwr_robot)/robot/$(arg robot_name).urdf.xacro"/>
        <include file="$(find lwr_hw)/launch/lwr_hw.launch">
            <arg name="port" value="$(arg port)"/>
            <arg name="ip" value="$(arg ip)"/>
            <arg name="file_with_path" value="$(arg fril_init_file)"/>
            <!-- this name MUST match the name you give to the arm in the URDF instance -->
            <!-- to minimize errors, you could pass it as a xacro parameter -->
            <arg name="name" value="lwr"/>
        </include>
        
        <!-- spawn only desired controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller arm_state_controller $(arg controllers)"/>
        <node name="controller_stopper" pkg="controller_manager" type="spawner" args="--stopped $(arg stopped_controllers)" />
    </group>
    
</launch>
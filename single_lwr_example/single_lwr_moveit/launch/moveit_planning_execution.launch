<launch>
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
 
  <!-- Non-standard joint names:
       - Create a file [robot_moveit_config]/config/joint_names.yaml
           controller_joint_names: [joint_1, joint_2, ... joint_N] 
       - Update with joint names for your robot (in order expected by rbt controller)
       - and uncomment the following line: -->
  <!-- <rosparam command="load" file="$(find [robot_moveit_config])/config/joint_names.yaml"/> -->
 
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
  <arg name="sim" default="true" doc="If true, the robot will be simulated in Gazebo" />
  <arg name="robot_ip" default="192.168.0.20" unless="$(arg sim)" doc="The IP address of the robot" />
  <arg name="robot_port" default="49939" unless="$(arg sim)" doc="The listening port of the FRI interface" />
  <arg name="rviz" default="true" doc="Launch rviz in order to command the robot" />
  <arg name="impedance" default="true" doc="Use impedance control" />
 
  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find lwr_moveit)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

	<!-- Load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find lwr_moveit)/config/lwr_controller.yaml" command="load"/>
	
	<node unless="$(arg impedance)" ns="lwr" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
		output="screen"  args="joint_state_controller position_joint_trajectory_controller"/> 
    <node if="$(arg impedance)" ns="lwr" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen"  args="joint_state_controller joint_trajectory_controller"/> 
  
  <remap from="/lwr/joint_states" to="/joint_states"/>  <!--TODO: why is this needed??-->

	<!-- run the robot simulator and action interface nodes -->
	<group if="$(arg sim)">
		<!-- spawn the robot in gazebo -->
		<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model lwr_on_a_box"  respawn="false" output="screen" />

		<!-- enable/disable gui at will, the rviz listens to the simulation -->
		<include file="$(find gazebo_ros)/launch/empty_world.launch">
			<arg name="world_name" value="$(find lwr_description)/worlds/simple_environment.world"/>
			<arg name="paused" value="false"/>
			<arg name="use_sim_time" value="true"/>
			<arg name="gui" value="true"/>
			<arg name="headless" value="false"/>
			<arg name="debug" value="false"/>
		</include>

	</group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <include file="$(find lwr_hw)/launch/lwr_hw.launch" >
      <arg name="ip" value="$(arg robot_ip)"/>
	  <arg name="port" value="$(arg robot_port)"/>
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find lwr_moveit)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
    <arg name="impedance" value="$(arg impedance)" />
  </include>

  <include if="$(arg rviz)" file="$(find lwr_moveit)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include>
  
  <include file="$(find lwr_moveit)/launch/default_warehouse_db.launch" />

</launch>